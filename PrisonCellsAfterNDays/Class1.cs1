using System;
using System.Linq;
using System.Collections.Generic;

namespace PrisonCellsAfterNDays
{
    public class Solution
    {
        public int[] PrisonAfterNDays(int[] cells, int n)
        {
            int [] graph = GenerateGraph();
            int cellsDecimal = BinaryToDecimal(cells);
            
            LinkedList<int> firstCycleOrNot = GetFirstCycleOrNot(cellsDecimal, graph);

            if(firstCycleOrNot.Count == n + 1) ///
            {
                return DecimalToBinary(firstCycleOrNot.Last.Value);
            }
            ///// IS CYCLE ////
            
            
            
        }  

        LinkedList<int> GetFirstCycleOrNot(int cellsDecimal, int [] graph, int n)
        {
            bool [] selected = new bool[256];
            LinkedList<int> result = new LinkedList<int>();
            
            selected [ cellsDecimal ] = true;
            result.AddLast(cellsDecimal);
            
            while(n > 0)
            {
                cellsDecimal = graph[cellsDecimal] ;
                bool isCycle = selected[cellsDecimal];
                selected [ cellsDecimal ] = true;
                result.AddLast(cellsDecimal);               
                n--;
                if(isCycle)
                    break;             
            }            

            return result;
        }

        int [] GenerateGraph()
        {
            int [] result = new int [256] ;
            
            for ( int i = 0 ; i < 256 ; i ++)
            {
                var binary1 = DecimalToBinary(i);
                var binary2 = GetNextBinary(binary);
                var i2 = BinaryToDecimal(binary2);
                result[i] = i2; 
            }
    
            return result ;
        }

        int [] GetNextBinary(int [] binary)
        {
            int [] result = new int[8];
            
            for(int i = 1; i < 7 ; i ++ )
            {
                if( binary[i-1] == binary[i+1])
                    result = 1;
                //else
                //    result = 0; 
            }            

            return result;
        }

        
        int BinaryToDecimal(int [] binary)
        {
            int result = 0;
            int power = 1;
            for( int i = 0; i < binary.Length ; i++)
            {
                result += power*binary[i];
                power *= 2;
            }
            
            return result;
        }

        int [] DecimalToBinary( int dec)
        {
            int [] result = new int[8];
            
            int index = 0;
            
            while( dec != 0 )
            {
                int res = dec % 2
                result[index] = res;
                index ++;
                dec = dec/2;
            }

            return result;
        }      
        
        IEnumerabl<int[]> GenerateAllValues(int n)
        {
              int index = 0;
              currentValue = new int[n];   
              allValues = new LinkedList<int[]>();
              GenerateAllValues(index , currentValue, allValues);
              return allValues;
        }

        GenerateAllValues( int index , int [] currentValue, LinkedList<int[]> allValues )
        {
            currentValue[index] = 0;

            if( index == currentValue.Length - 1)
            {
                allValues.AddLast(currentValue.Select(e=>e).ToArray());
            }
            else
            {
                GenerateAllValues( index+1 , currentValue , allValues);
            }

            currentValue[index] = 1;
            if( index == currentValue.Length - 1)
            {
                allValues.AddLast(currentValue.Select(e=>e).ToArray());
            }
            else
            {
                GenerateAllValues( index+1 , currentValue , allValues);
            }
        }

        

    }
}
