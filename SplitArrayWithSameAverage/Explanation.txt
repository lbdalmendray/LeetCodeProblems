
Objective : We need to find B ( subset of A , not empty, B!=A ) and C ( subset of A, not empty, C!=A ) that Average(A) = Average(B) = Average(C)

The idea is :

- if we find a set B that

* Average(A) = Average(B) => Average(B) = Average(C)

This is the base of all the implementation algorithm : We just need to find B with Average(B) = Average(A)

- Then trying to not calculate a lot of average we could just calculate Average(A) , and then calculate a set deltaA base on A .
DeltaA : { e - Avergage(A) : e belongs to A } 

Average(DeltaA) = 0 

With DeltaA we just need a subSet DeltaB that Average(DeltaB) = 0 

- The other part of the Idea is not to calculate all the posible combinations of 30 numbers ( Math.Pow(2,30 ) ) and try to calculate a smaller number of combinations . 
To Do that we just calculate a near Max of all 28 numbers combinations . This is base on the idea that there have to be at leat 28 numbers all bigger( smaller)
than the Average(DeltaA). Thinking about this we could say that if there are 30 numbers all bigger ( smaller ) then the we could never calculate that Average(DeltaA) = 0 .
In the case that there exist 29 numbers all bigger ( smaller) then that implies that just 1 number,called oneNumber, is in the other side of smaller ( bigger ) than the Average(DeltaA).
That means that is no solution because maybe we could create a set DeltaB with the oneNumber and a subset of numbers of the other side bigger( smaller ) . But what happend with
the rest of numbers , they are all in the same side , that means that we could not make a DeltaC set that the Average(DeltaC) = 0 , because all are in one side . That means that
each side will have at leat 2 numbers to have a solution , other case there is no solution . 



