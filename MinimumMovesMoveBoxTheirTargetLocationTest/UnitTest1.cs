using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MinimumMovesMoveBoxTheirTargetLocation;

namespace MinimumMovesMoveBoxTheirTargetLocationTest
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod1()
        {
            string [,] input = {
               {"#", "#", "#", "#", "#", "#"},
               {"#", "T", "#", "#", "#", "#"},
               {"#", ".", ".", "B", ".", "#"},
               {"#", ".", "#", "#", ".", "#"},
               {"#", ".", ".", ".", "S", "#"},
               {"#", "#", "#", "#", "#", "#"}
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 3);
        }

        [TestMethod]
        public void TestMethod2()
        {
            string[,] input = {
              {"#","#","#","#","#","#"},
               {"#","T","#","#","#","#"},
               {"#",".",".","B",".","#"},
               {"#","#","#","#",".","#"},
               {"#",".",".",".","S","#"},
               {"#","#","#","#","#","#"}
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }

        [TestMethod]
        public void TestMethod3()
        {
            string[,] input = {
               {"#","#","#","#","#","#"},
               {"#","T",".",".","#","#"},
               {"#",".","#","B",".","#"},
               {"#",".",".",".",".","#"},
               {"#",".",".",".","S","#"},
               {"#","#","#","#","#","#"}
    };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 5);
        }

        [TestMethod]
        public void TestMethod4()
        {
            string[,] input = {
               {"#","#","#","#","#","#","#"},
               {"#","S","#",".","B","T","#"},
               {"#","#","#","#","#","#","#"}
    };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }

        [TestMethod]
        public void TestMethod5()
        {
            string[,] input = {
               {"#","#","#","#","#","#"},
               {"T",".",".",".","#","#"},
               {"#",".","#","B",".","#"},
               {"#",".",".",".",".","#"},
               {"#",".",".",".","S","#"},
               {"#","#","#","#","#","#"}
    };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 6);
        }

        [TestMethod]
        public void TestMethod6()
        {
            string[,] input = {
{ "T",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","S",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".","B",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
};

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 24);
        }

        [TestMethod]
        public void TestMethod7()
        {
            string[,] input = {
{ "B","T","S",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
};

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }




        [TestMethod]
        public void TestMethod8()
        {
            string[,] input = {
{ ".",".",".",".","S",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".","B",".",".",".",".","." },
{ "#","#","#","#",".","#","#","#","#","#" },
{ ".",".",".","T",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
};
        }

                    [TestMethod]
        public void TestMethod8_2()
        {
            string[,] input = {
{ ".","S","." },
{ ".","B","." },
{ "#",".","#" },
{ "T",".","." },
{ ".",".","." },
{ ".",".","." }
};

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 5);
        }

        [TestMethod]
        public void TestMethod9()
        {
            string[,] input = {
{ ".",".",".",".","S",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".","B",".",".",".",".","." },
{ "#","#",".","#",".","#","#","#","#","#" },
{ ".",".",".","T",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
};

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 3);
        }

        [TestMethod]
        public void TestMethod10()
        {
            string[,] input = {
{ ".",".",".",".","S",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".","#","#","#","#","#","#",".","." },
{ ".",".",".",".","B",".",".",".",".","." },
{ ".",".","#","#","#","#","#","#",".","." },
{ ".",".",".","T",".",".",".",".",".","." },
{ "#","#","#","#","#","#","#","#","#","#" },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." },
};

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 7);
        }

        [TestMethod]
        public void TestMethod11()
        {
            string[,] input = {
{ ".",".",".",".","S",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." ,".",".",".",".",".",".",".",".",".","."},
{ ".",".","#","#","#","#","#","#",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".","B",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".","#","#","#","#","#","#",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","T",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ "#","#","#","#","#","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".","." ,".",".",".",".",".",".",".",".",".","."},
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 7);
        }

        [TestMethod]
        public void TestMethod12()
        {
            string[,] input = {

{ "#","#","#","#","#" },
{ "T","S","B",".","." },
{ "#","#","#","#","#" },

            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }

        [TestMethod]
        public void TestMethod13()
        {
            string[,] input = {
                { "#","#","#","#" },
                { "T","S","B","." },
                { "#","#","#","#" },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }

        [TestMethod]
        public void TestMethod14()
        {
            string[,] input = {
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#","B","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".","S","T","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 18);
        }

        [TestMethod]
        public void TestMethod15()
        {
            string[,] input = {
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".","B",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".",".",".",".","T","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","S" },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }

        [TestMethod]
        public void TestMethod16()
        {
            string[,] input = {

{ "T","#",".",".","." },
{ ".","S","B",".","." },
{ ".",".","#",".","." },

            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 5);
        }

        [TestMethod]
        public void TestMethod1010()
        {
            //foreach ((string[,] input,int response ) in GenerateGoodWorld(20).Skip(100000).Take(10))
            foreach ((string[,] input,int response ) in GenerateGoodWorld(10).Take(1000))
            {
                Solution s = new Solution();
                var goodInput = Transform(input);
                var goodInputClone =Transform(input);
                var result = s.MinPushBox(goodInput);
                if ( result != response )
                {
                    WriteGrid("TestMethod1010.txt", goodInputClone);
                }
                Assert.AreEqual(result, response, "It has generated a log file :TestMethod1010.txt");
            }
        }

        [TestMethod]
        public void TestMethod17()
        {
            string[,] input = {
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".","B",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".","T","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","S" },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 20);
        }


        [TestMethod]
        public void TestMethod18()
        {
            string[,] input = {
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".","B","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".","T","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","S" },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }


        [TestMethod]
        public void TestMethod19()
        {
            string[,] input = {
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".","B","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#","#","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".","T","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".","#",".","#","#","#","#","#",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","." },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#","#" },
{ ".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#","S" },
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }


        [TestMethod]
        public void TestMethod20()
        {
            string[,] input = {
{ "S","T","B" }
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, -1);
        }

        [TestMethod]
        public void TestMethod21()
        {
            string[,] input = {
{ "S","B","T" }
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 1);
        }

        [TestMethod]
        public void TestMethod22()
        {
            string[,] input = {
{ "T","B","S" }
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 1);
        }

        [TestMethod]
        public void TestMethod23()
        {
            string[,] input = {
{ "S" },
{ "B" },
{ "T" }
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 1);
        }

        [TestMethod]
        public void TestMethod24()
        {
            string[,] input = {
{ "T" },
{ "B" },
{ "S" }
            };

            Solution s = new Solution();
            var goodInput = Transform(input);
            var result = s.MinPushBox(goodInput);
            Assert.AreEqual(result, 1);
        }

        [TestMethod]
        public void TestMethod2020()
        {
            foreach ((string[,] input,int response ) in GenerateGoodWorld(20).Skip(100000).Take(20))
            {
                Solution s = new Solution();
                var goodInput = Transform(input);
                var goodInputClone = Transform(input);
                var result = s.MinPushBox(goodInput);
                if (result != response)
                {
                    WriteGrid("TestMethod1010.txt", goodInputClone);
                }
                Assert.AreEqual(result, response, "It has generated a log file :TestMethod1010.txt" );
            }
        }

        private void WriteGrid(string fileName, char[][] goodInput)
        {
            if (File.Exists(fileName))
                File.Delete(fileName);
            using ( var writer = new StreamWriter(fileName))
            {
                writer.WriteLine("{");
                for (int i = 0; i < goodInput.Length; i++)
                {
                    writer.WriteLine("{ " +getLine(goodInput[i])+ " },");
                }

                writer.WriteLine("}");

            }
        }

        private string getLine(char[] chars)
        {
            string result = "";
            foreach (var charValue in chars.Take(chars.Length-1))
            {
                result += "\""+ charValue.ToString() + "\""+ ",";
            }

            result += "\"" + chars.Last().ToString() + "\"";

            return result;
        }

        private IEnumerable<(string[,],int)> GenerateGoodWorld(int dimension)
        {
            var grid = new string[dimension, dimension];
            for (int i = 0; i < dimension; i++)
            {
                for (int j = 0; j < dimension; j++)
                {
                    grid[i, j] = ".";
                }
            }

            for (int i = 0; i < dimension; i++)
            {
                for (int j = 0; j < dimension; j++)
                {
                    grid[i, j] = "T";

                    for (int k = 0; k < dimension; k++)
                    {
                        for (int l = 0; l < dimension; l++)
                        {
                            if (i == k && l == j)
                                continue;
                            grid[k, l] = "B";

                            for (int n = 0; n < dimension; n++)
                            {
                                for (int m = 0; m < dimension; m++)
                                {
                                    if (n == k && m == l || n == i && m == j)
                                        continue;

                                    grid[n, m] = "S";

                                    yield return (grid, CreateResponse(dimension, i, j, k, l));

                                    grid[n, m] = ".";
                                }
                            }

                            grid[k, l] = ".";

                        }
                    }

                    grid[i, j] = ".";

                }
            }
        }

        private int CreateResponse(int dimension, int i, int j, int k, int l)
        {
            //return k == dimension - 1 || l == dimension - 1 ? -1 : Distance(i, j, k, l);
            if ((k == dimension - 1 || k == 0) && (l == 0 || l == dimension - 1))
            {
                return -1;
            }
            else if (k == dimension - 1 && i != dimension - 1)
            {
                return -1;
            }
            else if (k == 0 && i != 0)
            {
                return -1;
            }
            else if (l == dimension - 1 && j != dimension - 1)
            {
                return -1;
            }
            else if (l == 0 && j != 0)
            {
                return -1;
            }
            else
                return Distance(i, j, k, l);
        }

        private int Distance(int i, int j, int k, int l)
        {
            return Math.Abs(i - k) + Math.Abs(j - l);
        }

        private char[][] Transform(string[,] input)
        {
            char[][] result = new char[input.GetLength(0)][];
            for (int i = 0; i < input.GetLength(0); i++)
            {
                LinkedList<string> list = new LinkedList<string>();
                for (int j = 0; j < input.GetLength(1); j++)
                {
                    list.AddLast(input[i, j]);
                }
                result[i] = list.Select(e => e[0]).ToArray();
            }

            return result;
        }
    }
}
